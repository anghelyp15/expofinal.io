frase_sin_palabra <- gsub(paste0("\\b", palabra_a_suprimir, "\\b", collapse = "|"), "", frase, ignore.case = TRUE)
return(frase_sin_palabra)
}
# Aplicar la función a la columna 'frase' del dataframe
data$frase_sin_publica<- suprimir_palabra_en_frase(df$frase, "publica")
#Estandarizamos las respuestas sobre que carrera estudia y que materia se encuentra estudiando, debido a que puede contener caracteres tanto en minuscula como en mayuscula al igual que contener tildes que afecten el análisis.
data<-data %>% mutate(materia_qu=tolower(materia_qu))
suprimir_s_finales <- function(columna) {
columna_sin_s <- gsub("s$", "", columna)
return(columna_sin_s)
}
# Función para suprimir una palabra específica de una frase
suprimir_palabra_en_frase <- function(frase, palabra_a_suprimir) {
frase_sin_palabra <- gsub(paste0("\\b", palabra_a_suprimir, "\\b", collapse = "|"), "", frase, ignore.case = TRUE)
return(frase_sin_palabra)
}
# Aplicar la función a la columna 'frase' del dataframe
data$frase_sin_publica<- suprimir_palabra_en_frase(data$frase, "publica")
# Define el número de fila que deseas actualizar
fila_numero <- 40
# Asigna la nueva descripción a la fila específica y la columna 'descripcion'
data[fila_numero, "descripcion"] <- paste0(data[fila_numero, "descripcion"], "(publica)")
# Define el número de fila que deseas actualizar
fila_numero <- 40
# Asigna la nueva descripción a la fila específica y la columna 'descripcion'
data[fila_numero, "carrera_qu"] <- paste0(data[fila_numero, "carrera_qu"], "(publica)")
View(data)
# Define el número de fila que deseas actualizar
fila_numero <- 40
# Asigna la nueva descripción a la fila específica y la columna 'descripcion'
data[fila_numero, "carrera_qu"] <- paste0(data[fila_numero, "carrera_qu"], " (publica)")
# Define el número de fila que deseas actualizar
fila_numero <- 40
# Añadir "(publica)" a la celda específica en la columna 'carrera_qu'
data[fila_numero, "carrera_qu"] <- paste0(data[fila_numero, "carrera_qu"], " (publica)")
# Define el número de fila que deseas actualizar
fila_numero <- 40
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "contaduria"
View(data)
# Define el número de fila que deseas actualizar
fila_numero <- 40
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "contaduria publica"
View(data)
library(plotly)
plot_ly(data=data_geometria,x=~materia_qu,y=~numero_de_,type="scatter",mode = "markers+text",color=~carrera_qu)
#Estandarizamos las respuestas sobre que carrera estudia y que materia se encuentra estudiando, debido a que puede contener caracteres tanto en minuscula como en mayuscula al igual que contener tildes que afecten el análisis.
data<-data %>% mutate(materia_qu=tolower(materia_qu))
suprimir_s_finales <- function(carrera_qu) {
columna_sin_s <- gsub("s$", "", carrera_qu)
return(columna_sin_s)
}
#eliminar tildes
data <- data %>% mutate(materia_qu=iconv(materia_qu, from = "UTF-8", to = "ASCII//TRANSLIT"))
data<-data %>% mutate(carrera_qu=tolower(carrera_qu))
#eliminar tildes
data <- data %>% mutate(carrera_qu=iconv(carrera_qu, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Define el número de fila que deseas actualizar
fila_numero <- 40
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "contaduria publica"
# Define el número de fila que deseas actualizar
fila_numero <- 39
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "negocios internacionales"
library(plotly)
plot_ly(data=data_geometria,x=~materia_qu,y=~numero_de_,type="scatter",mode = "markers+text",color=~carrera_qu)
View(data_geometria)
#instalar paquetes
#install.packages("sf")
#install.packages("tidyverse")
#install.packages("ggplot2")
#install.packages("readr")
#install.packages("plotly")
#install.packages("osmdata")
#install.packages("leaflet")
#install.packages("kableExtra")
library(pander)
library(sf)
library(tidyverse)
library(ggplot2)
library(readr)
library(plotly)
library(osmdata)
library(leaflet)
library(kableExtra)
# Se carga la base de datos
data <- st_read("survey.shp")
kable(head(data, 3))
#Estandarizamos las respuestas sobre que carrera estudia y que materia se encuentra estudiando, debido a que puede contener caracteres tanto en minuscula como en mayuscula al igual que contener tildes que afecten el análisis.
data<-data %>% mutate(materia_qu=tolower(materia_qu))
#eliminar tildes
data <- data %>% mutate(materia_qu=iconv(materia_qu, from = "UTF-8", to = "ASCII//TRANSLIT"))
data<-data %>% mutate(carrera_qu=tolower(carrera_qu))
#eliminar tildes
data <- data %>% mutate(carrera_qu=iconv(carrera_qu, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Define el número de fila que deseas actualizar
fila_numero <- 40
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "contaduria publica"
# Define el número de fila que deseas actualizar
fila_numero <- 39
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "negocios internacionales"
#Verificar duplicados en filas completas
duplicados_filas <- duplicated(data)
# Graficar la Universidad del Magdalena en los limites de Santa Marta
datad <- getbb("Santa Marta, Magdalena, Colombia")
# Construir la consulta OSM para obtener universidades
datad <- opq(bbox = datad) %>%
add_osm_feature(key = "amenity", value = "university")
## Obtener los datos en formato sf
datad_sf <- osmdata_sf(datad)
## Seleccionar los polígonos y las columnas de interés
datad_geometria <- datad_sf$osm_polygons %>%
select(osm_id, name)
# Filtrar para obtener solo la Universidad del Magdalena
universidad_del_magdalena <- datad_geometria %>%
filter(name == "Universidad del Magdalena")
library(dplyr)
library(tidyverse)
mymap <- leaflet(data=universidad_del_magdalena) %>%
addTiles() %>%
addPolygons(color = "blue", fillOpacity = 0.5, weight = 2, popup = ~name)
# Mostrar el mapa
mymap
# Crear el mapa de zonas universitarias en Santa Marta
mapa4 <- opq(bbox = getbb("Universidad del Magdalena, Colombia")) %>%
add_osm_feature(key = "building", value = "university") %>%
osmdata_sf()
# Extraer los polígonos de las zonas universitarias
cc_geometria <- mapa4$osm_polygons
# Crear el mapa de leaflet con los polígonos
mapa <- leaflet(cc_geometria) %>%
addTiles() %>%
addPolygons(col = "blue")
# Agregar los marcadores circulares con los datos de datos_sf2
mapa_final <- mapa %>%
addCircleMarkers(data = data_geometria,
lng = ~lng,        # Columna de longitud
lat = ~lat,        # Columna de latitud
color = "red",     # Color de los puntos
fillOpacity = 0.8  # Opacidad del relleno
)
View(datad_geometria)
# Crear el mapa de zonas universitarias en Santa Marta
mapa4 <- opq(bbox = getbb("Universidad del Magdalena, Colombia")) %>%
add_osm_feature(key = "building", value = "university") %>%
osmdata_sf()
# Extraer los polígonos de las zonas universitarias
cc_geometria <- mapa4$osm_polygons
# Crear el mapa de leaflet con los polígonos
mapa <- leaflet(cc_geometria) %>%
addTiles() %>%
addPolygons(col = "blue")
# Agregar los marcadores circulares con los datos de datos_sf2
mapa_final <- mapa %>%
addCircleMarkers(data = datad_geometria,
lng = ~lng,        # Columna de longitud
lat = ~lat,        # Columna de latitud
color = "red",     # Color de los puntos
fillOpacity = 0.8  # Opacidad del relleno
)
# Crear el mapa de zonas universitarias en Santa Marta
mapa4 <- opq(bbox = getbb("Universidad del Magdalena, Colombia")) %>%
add_osm_feature(key = "building", value = "university") %>%
osmdata_sf()
# Extraer los polígonos de las zonas universitarias
cc_geometria <- mapa4$osm_polygons
# Crear el mapa de leaflet con los polígonos
mapa <- leaflet(cc_geometria) %>%
addTiles() %>%
addPolygons(col = "blue")
# Agregar los marcadores circulares con los datos de datos_sf2
mapa_final <- mapa %>%
addCircleMarkers(data = cc_geometria,
lng = ~lng,        # Columna de longitud
lat = ~lat,        # Columna de latitud
color = "red",     # Color de los puntos
fillOpacity = 0.8  # Opacidad del relleno
)
View(cc_geometria)
View(datad_geometria)
View(datad)
View(datad_sf)
View(mapa)
View(data)
#Estandarizamos las respuestas sobre que carrera estudia y que materia se encuentra estudiando, debido a que puede contener caracteres tanto en minuscula como en mayuscula al igual que contener tildes que afecten el análisis.
data<-data %>% mutate(materia_qu=tolower(materia_qu))
#eliminar tildes
data <- data %>% mutate(materia_qu=iconv(materia_qu, from = "UTF-8", to = "ASCII//TRANSLIT"))
data<-data %>% mutate(carrera_qu=tolower(carrera_qu))
#eliminar tildes
data <- data %>% mutate(carrera_qu=iconv(carrera_qu, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Define el número de fila que deseas actualizar
fila_numero <- 40
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "contaduria publica"
# Define el número de fila que deseas actualizar
fila_numero <- 39
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "negocios internacionales"
#Verificar duplicados en filas completas
duplicados_filas <- duplicated(data)
#Convertimos la columna geometry en un objeto espacial
data_sf<-st_as_sf(data)
#Extraemos coordenadas lon y lat
coordenadas<-st_coordinates(data_sf)
#Creamos un data frame con los datos separados (SOLO COORDENADAS)
data_sep<-as.data.frame(coordenadas)
#Renombrar columnas
colnames(data_sep)<- c("lng", "lat")
# COMBINAMOS LOS DATOS ESPACIALES A NUESTRA DATAFRAME INICIAL
data_geometria <- cbind(data_sf, data_sep)
# Graficar la Universidad del Magdalena en los limites de Santa Marta
datad <- getbb("Santa Marta, Magdalena, Colombia")
# Construir la consulta OSM para obtener universidades
datad <- opq(bbox = datad) %>%
add_osm_feature(key = "amenity", value = "university")
## Obtener los datos en formato sf
datad_sf <- osmdata_sf(datad)
## Seleccionar los polígonos y las columnas de interés
datad_geometria <- datad_sf$osm_polygons %>%
select(osm_id, name)
# Filtrar para obtener solo la Universidad del Magdalena
universidad_del_magdalena <- datad_geometria %>%
filter(name == "Universidad del Magdalena")
library(dplyr)
library(tidyverse)
mymap <- leaflet(data=universidad_del_magdalena) %>%
addTiles() %>%
addPolygons(color = "blue", fillOpacity = 0.5, weight = 2, popup = ~name)
# Mostrar el mapa
mymap
View(datad_sf)
View(data_sep)
#Convertimos la columna geometry en un objeto espacial
data_sf<-st_as_sf(data)
#Extraemos coordenadas lon y lat
coordenadas<-st_coordinates(data_sf)
#Creamos un data frame con los datos separados (SOLO COORDENADAS)
data_sep<-as.data.frame(coordenadas)
#Renombrar columnas
colnames(data_sep)<- c("lng", "lat")
# COMBINAMOS LOS DATOS ESPACIALES A NUESTRA DATAFRAME INICIAL
data_geometria <- cbind(data_sf, data_sep)
View(data_geometria)
#Convertimos la columna geometry en un objeto espacial
data_sf<-st_as_sf(data)
#Extraemos coordenadas lon y lat
coordenadas<-st_coordinates(data_sf)
#Creamos un data frame con los datos separados (SOLO COORDENADAS)
data_sep<-as.data.frame(coordenadas)
#Renombrar columnas
colnames(data_sep)<- c("lng", "lat")
# COMBINAMOS LOS DATOS ESPACIALES A NUESTRA DATAFRAME INICIAL
data_geometria <- cbind(data_sf, data_sep)
# Graficar la Universidad del Magdalena en los limites de Santa Marta
datad <- getbb("Santa Marta, Magdalena, Colombia")
# Construir la consulta OSM para obtener universidades
datad <- opq(bbox = datad) %>%
add_osm_feature(key = "amenity", value = "university")
## Obtener los datos en formato sf
datad_sf <- osmdata_sf(datad)
## Seleccionar los polígonos y las columnas de interés
datad_geometria <- datad_sf$osm_polygons %>%
select(osm_id, name)
# Filtrar para obtener solo la Universidad del Magdalena
universidad_del_magdalena <- datad_geometria %>%
filter(name == "Universidad del Magdalena")
library(dplyr)
library(tidyverse)
mymap <- leaflet(data=universidad_del_magdalena) %>%
addTiles() %>%
addPolygons(color = "blue", fillOpacity = 0.5, weight = 2, popup = ~name)
# Mostrar el mapa
mymap
# Crear el mapa de zonas universitarias en Santa Marta
mapa4 <- opq(bbox = getbb("Universidad del Magdalena, Colombia")) %>%
add_osm_feature(key = "building", value = "university") %>%
osmdata_sf()
# Extraer los polígonos de las zonas universitarias
cc_geometria <- mapa4$osm_polygons
# Crear el mapa de leaflet con los polígonos
mapa <- leaflet(cc_geometria) %>%
addTiles() %>%
addPolygons(col = "blue")
# Agregar los marcadores circulares con los datos de datos_sf2
mapa_final <- mapa %>%
addCircleMarkers(data = data_geometria,
lng = ~lng,        # Columna de longitud
lat = ~lat,        # Columna de latitud
color = "red",     # Color de los puntos
fillOpacity = 0.8  # Opacidad del relleno
)
# Mostrar el mapa final
mapa_final
#Distancias de las propiedades a los bloques de la Universidad
dist_matrix <- st_distance(x = datad_geometria, y = centr)
#install.packages("sf")
#todos los centroides
centr<-st_centroid(cc_geometria)
leaflet(cc_geometria) %>%
addTiles() %>%
addCircleMarkers(data=centr,col="red") %>%
addPolygons(col="yellow")
#Distancias de las propiedades a los bloques de la Universidad
dist_matrix <- st_distance(x = datad_geometria, y = centr)
# Encontramos la distancia mínima a los bloques de la Universidad
dist_min <- apply(dist_matrix, 1, min)
datad_geometria$distancia_zona <- dist_min
summary(datad_geometria$distancia_zona)
grafico<-plot_ly(data=data_geometria, x=data_geometria$carrera_qu, y=data_geometria$numero_de_, name="Numero de personas que estudian en la zona y su carrera")
grafico
# Calcular la cantidad total de estudiantes por materia
t_materia <- aggregate(numero_de_~ materia_qu, data = data_geometria, sum)
fig <- plot_ly(
data=t_materia,
x = ~materia_qu,
y = ~numero_de_,
type = 'bar',
name = 'No. de Estudiantes por Materia'
)
# Personalizar el gráfico
fig <- fig %>% layout(
title = 'Cantidad de Estudiantes por Materia',
xaxis = list(title = 'Materia'),
yaxis = list(title = 'Cantidad de Estudiantes')
)
# Mostrar el gráfico
fig
# Calcular la cantidad total de estudiantes por materia
t_materia <- aggregate(numero_de_~ materia_qu, data = data_geometria, sum)
fig <- plot_ly(
data=t_materia,
x = ~materia_qu,
y = ~numero_de_,
type = 'bar',
name = 'No. de Estudiantes por Materia'
)
# Personalizar el gráfico
fig <- fig %>% layout(
title = 'Cantidad de Estudiantes por Materia',
xaxis = list(title = 'Materia'),
yaxis = list(title = 'Cantidad de Estudiantes')
)
# Mostrar el gráfico
fig
# Define el número de fila que deseas actualizar
fila_numero <- 40
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "contaduria publica"
# Define el número de fila que deseas actualizar
fila_numero <- 39
columna_nombre <- "carrera_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "negocios internacionales"
# Define el número de fila que deseas actualizar
fila_numero <- 26
columna_nombre <- "materia_qu"  # Por ejemplo, actualizaremos la columna "carrera_qu"
# Asigna el nuevo valor a la celda específica
data[fila_numero, columna_nombre] <- "circuito dc"
# Calcular la cantidad total de estudiantes por materia
t_materia <- aggregate(numero_de_~ materia_qu, data = data_geometria, sum)
fig <- plot_ly(
data=t_materia,
x = ~materia_qu,
y = ~numero_de_,
type = 'bar',
name = 'No. de Estudiantes por Materia'
)
# Personalizar el gráfico
fig <- fig %>% layout(
title = 'Cantidad de Estudiantes por Materia',
xaxis = list(title = 'Materia'),
yaxis = list(title = 'Cantidad de Estudiantes')
)
# Mostrar el gráfico
fig
#Verificar duplicados en filas completas
duplicados_filas <- duplicated(data)
# Graficar la Universidad del Magdalena en los limites de Santa Marta
datad <- getbb("Santa Marta, Magdalena, Colombia")
# Construir la consulta OSM para obtener universidades
datad <- opq(bbox = datad) %>%
add_osm_feature(key = "amenity", value = "university")
## Obtener los datos en formato sf
datad_sf <- osmdata_sf(datad)
## Seleccionar los polígonos y las columnas de interés
datad_geometria <- datad_sf$osm_polygons %>%
select(osm_id, name)
# Filtrar para obtener solo la Universidad del Magdalena
universidad_del_magdalena <- datad_geometria %>%
filter(name == "Universidad del Magdalena")
library(dplyr)
library(tidyverse)
mymap <- leaflet(data=universidad_del_magdalena) %>%
addTiles() %>%
addPolygons(color = "blue", fillOpacity = 0.5, weight = 2, popup = ~name)
# Mostrar el mapa
mymap
# Crear el mapa de zonas universitarias en Santa Marta
mapa4 <- opq(bbox = getbb("Universidad del Magdalena, Colombia")) %>%
add_osm_feature(key = "building", value = "university") %>%
osmdata_sf()
# Extraer los polígonos de las zonas universitarias
cc_geometria <- mapa4$osm_polygons
# Crear el mapa de leaflet con los polígonos
mapa <- leaflet(cc_geometria) %>%
addTiles() %>%
addPolygons(col = "blue")
# Agregar los marcadores circulares con los datos de datos_sf2
mapa_final <- mapa %>%
addCircleMarkers(data = data_geometria,
lng = ~lng,        # Columna de longitud
lat = ~lat,        # Columna de latitud
color = "red",     # Color de los puntos
fillOpacity = 0.8  # Opacidad del relleno
)
# Mostrar el mapa final
mapa_final
#install.packages("sf")
#todos los centroides
centr<-st_centroid(cc_geometria)
leaflet(cc_geometria) %>%
addTiles() %>%
addCircleMarkers(data=centr,col="red") %>%
addPolygons(col="yellow")
#Distancias de las propiedades a los bloques de la Universidad
dist_matrix <- st_distance(x = datad_geometria, y = centr)
# Encontramos la distancia mínima a los bloques de la Universidad
dist_min <- apply(dist_matrix, 1, min)
datad_geometria$distancia_zona <- dist_min
summary(datad_geometria$distancia_zona)
# Calcular la cantidad total de estudiantes por materia
t_materia <- aggregate(numero_de_~ materia_qu, data = data_geometria, sum)
fig <- plot_ly(
data=t_materia,
x = ~materia_qu,
y = ~numero_de_,
type = 'bar',
name = 'No. de Estudiantes por Materia'
)
# Personalizar el gráfico
fig <- fig %>% layout(
title = 'Cantidad de Estudiantes por Materia',
xaxis = list(title = 'Materia'),
yaxis = list(title = 'Cantidad de Estudiantes')
)
# Mostrar el gráfico
fig
library(plotly)
plot_ly(data=data_geometria,x=~materia_qu,y=~numero_de_,type="scatter",mode = "markers+text",color=~carrera_qu)
grafico= plot_ly(data=data_geometria,x=data_geometria$carrera_qu, y=data_geometria$numero_de_) %>% add_trace(z002, name="Numero de personas que estudian en la zona y su carrera")
# Calcular la cantidad total de estudiantes por materia
t_materia <- aggregate(numero_de_~ materia_qu, data = data_geometria, sum)
fig <- plot_ly(
data=t_materia,
x = ~materia_qu,
y = ~numero_de_,
type = 'bar',
name = 'No. de Estudiantes por Materia'
)
# Personalizar el gráfico
fig <- fig %>% layout(
title = 'Cantidad de Estudiantes por Materia',
xaxis = list(title = 'Materia'),
yaxis = list(title = 'Cantidad de Estudiantes')
)
# Mostrar el gráfico
fig
View(data_geometria)
#Convertimos la columna geometry en un objeto espacial
data_sf<-st_as_sf(data)
#Extraemos coordenadas lon y lat
coordenadas<-st_coordinates(data_sf)
#Creamos un data frame con los datos separados (SOLO COORDENADAS)
data_sep<-as.data.frame(coordenadas)
#Renombrar columnas
colnames(data_sep)<- c("lng", "lat")
# COMBINAMOS LOS DATOS ESPACIALES A NUESTRA DATAFRAME INICIAL
data_geometria <- cbind(data_sf, data_sep)
View(data_geometria)
# Calcular la cantidad total de estudiantes por materia
t_materia <- aggregate(numero_de_~ materia_qu, data = data_geometria, sum)
fig <- plot_ly(
data=t_materia,
x = ~materia_qu,
y = ~numero_de_,
type = 'bar',
name = 'No. de Estudiantes por Materia'
)
# Personalizar el gráfico
fig <- fig %>% layout(
title = 'Cantidad de Estudiantes por Materia',
xaxis = list(title = 'Materia'),
yaxis = list(title = 'Cantidad de Estudiantes')
)
# Mostrar el gráfico
fig
library(plotly)
plot_ly(data=data_geometria,x=~materia_qu,y=~numero_de_,type="scatter",mode = "markers+text",color=~carrera_qu)
